<!doctype html>

<html>
<head>
	<title>Assignment 1</title>	
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->        
      <link rel="stylesheet" type="text/css" href="css/bootstrap.css">
      <link rel="stylesheet" type="text/css" href="css/bootstrap-theme.css">
      <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,300' rel='stylesheet' type='text/css'>
</head>

<body>
    <div class="container">
      <h1> Percentage of your friends that are: </h1>
          
          {{#each nums}} <div align="left" id="{{index}}" class="nums"><b>{{name}}: </b> {{percent}}% <br>  </div>            
          {{/each}} 
          <br>

          <form id="data">
          {{#each nums}}
              <input type="hidden" name="{{name}}" value="{{percent}}"/> 
          {{/each}}
          </form>
          
      <script src="http://d3js.org/d3.v3.min.js"></script>
      <script>
      var form = document.getElementById('data');
      var children = form.children;
      var names = new Array();
      var percent = new Array();
      // console.log("childrenlength " + children.length);

      for(var i = 0; i < children.length; i++){
          names.push(children[i].name);
          var num = Math.round(children[i].value);
          // console.log("num " + num + " rd " + Math.round(num));
          percent.push(num);
          // console.log("names "+children[i].name + " percent " + children[i].value);
      }
      // console.log("nameslen "+ names.length+ " percentlen " + percent.length);

      var width = 960,
          height = 500,
          padding = 1.5, // separation between same-color nodes
          clusterPadding = 6, // separation between different-color nodes
          maxRadius = 12;

      var n = 100, // total number of nodes
          m = 11; // number of distinct clusters

      var color = d3.scale.category20()
          .domain(d3.range(m));
      // console.log("color is " + color);

      // The largest node for each cluster.
      var clusters = new Array(m);
      var c = 0, i = 0, index = 0;      
      
      var currentPercent = percent[0];
      
      var nodes = d3.range(n).map(function() {
        
        // console.log("currentPercent " + currentPercent);
       
        // console.log("i " + i);

        // var i = Math.floor(Math.random() * m);
        // var r = Math.sqrt((i + 1) / m * -Math.log(Math.random())) * maxRadius;
        var r = Math.sqrt((c + 1) / m * -Math.log(Math.random())) * maxRadius;
        if(r <= 4 )
          r =5;
        // var r = 10;
        // var d = {cluster: i, radius: r};
        
        if(index >= currentPercent)
        {
          c = c + 1;         
          // console.log("c is " + c + " adding " + percent[c]); 
          currentPercent = currentPercent + percent[c];
        }
       
        // var d = {cluster: i, radius: r};
        var d = {cluster: c, radius: r};
        console.log("d cluster " + d.cluster + " radius " + d.radius);
        if (!clusters[c] || (r > clusters[c].radius)) 
        {
          clusters[c] = d;
          i = i + 1;          
        }
        index = index + 1;
        // console.log('index is ' + index);
        return d;
      });

      // Use the pack layout to initialize node positions.
      d3.layout.pack()
          .sort(null)
          .size([width, height])
          .children(function(d) { return d.values; })
          .value(function(d) { return d.radius * d.radius; })
          .nodes({values: d3.nest()
            .key(function(d) { return d.cluster; })
            .entries(nodes)});

      var force = d3.layout.force()
          .nodes(nodes)
          .size([width, height])
          .gravity(.02)
          .charge(0)
          .on("tick", tick)
          .start();

      var svg = d3.select("body").append("svg")
          .attr("width", width)
          .attr("height", height);

      var node = svg.selectAll("circle")
          .data(nodes)
        .enter().append("circle")
          .style("fill", function(d) { return color(d.cluster); })
          .call(force.drag);

      node.transition()
          .duration(750)
          .delay(function(d, i) { return i * 5; })
          .attrTween("r", function(d) {
            var i = d3.interpolate(0, d.radius);
            return function(t) { return d.radius = i(t); };
          });

      function tick(e) {
        node
            .each(cluster(10 * e.alpha * e.alpha))
            .each(collide(.5))
            .attr("cx", function(d) { return d.x; })
            .attr("cy", function(d) { return d.y; });
      }

      // Move d to be adjacent to the cluster node.
      function cluster(alpha) {
        return function(d) {
          var cluster = clusters[d.cluster];
          if (cluster === d) return;
          var x = d.x - cluster.x,
              y = d.y - cluster.y,
              l = Math.sqrt(x * x + y * y),
              r = d.radius + cluster.radius;
          if (l != r) {
            l = (l - r) / l * alpha;
            d.x -= x *= l;
            d.y -= y *= l;
            cluster.x += x;
            cluster.y += y;
          }
        };
      }

      // Resolves collisions between d and all other circles.
      function collide(alpha) {
        var quadtree = d3.geom.quadtree(nodes);
        return function(d) {
          var r = d.radius + maxRadius + Math.max(padding, clusterPadding),
              nx1 = d.x - r,
              nx2 = d.x + r,
              ny1 = d.y - r,
              ny2 = d.y + r;
          quadtree.visit(function(quad, x1, y1, x2, y2) {
            if (quad.point && (quad.point !== d)) {
              var x = d.x - quad.point.x,
                  y = d.y - quad.point.y,
                  l = Math.sqrt(x * x + y * y),
                  r = d.radius + quad.point.radius + (d.cluster === quad.point.cluster ? padding : clusterPadding);
              if (l < r) {
                l = (l - r) / l * alpha;
                d.x -= x *= l;
                d.y -= y *= l;
                quad.point.x += x;
                quad.point.y += y;
              }
            }
            return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
          });
        };
      }

      </script>    
    </div>

   <div id="fb-root"></div>
    <script>
      window.fbAsyncInit = function() {
        FB.init({
          appId      : '722501874439273',
          status     : true,
          xfbml      : true
        });
      };

      (function(d, s, id){
         var js, fjs = d.getElementsByTagName(s)[0];
         if (d.getElementById(id)) {return;}
         js = d.createElement(s); js.id = id;
         js.src = "//connect.facebook.net/en_US/all.js";
         fjs.parentNode.insertBefore(js, fjs);
       }(document, 'script', 'facebook-jssdk'));
    </script>


    <!--
      Below we include the Login Button social plugin. This button uses the JavaScript SDK to
      present a graphical Login button that triggers the FB.login() function when clicked. -->

      <form id="fbButton" action="/login" method="post">
        <fb:login-button show-faces="true" max-rows="10" data-size="xlarge" data-auto-logout-link="true" ></fb:login-button>
      </form>
      
    <script src="https://code.jquery.com/jquery.js"></script>
    <script src="js/bootstrap.js"></script>
</body>
</html>
